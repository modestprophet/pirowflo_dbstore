// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: waterrower.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const saveRowerData = `-- name: SaveRowerData :one
INSERT INTO fitness.waterrower (id, created_at, stroke_rate, total_strokes, total_distance_m, instantaneous_pace, speed, watts, total_kcal, total_kcal_hour, total_kcal_min, heart_rate, elapsedtime)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13
)
RETURNING id, created_at, stroke_rate, total_strokes, total_distance_m, instantaneous_pace, speed, watts, total_kcal, total_kcal_hour, total_kcal_min, heart_rate, elapsedtime
`

type SaveRowerDataParams struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	StrokeRate        int32
	TotalStrokes      int32
	TotalDistanceM    int32
	InstantaneousPace float32
	Speed             int32
	Watts             int32
	TotalKcal         float32
	TotalKcalHour     int32
	TotalKcalMin      int32
	HeartRate         int32
	Elapsedtime       int32
}

func (q *Queries) SaveRowerData(ctx context.Context, arg SaveRowerDataParams) (FitnessWaterrower, error) {
	row := q.db.QueryRowContext(ctx, saveRowerData,
		arg.ID,
		arg.CreatedAt,
		arg.StrokeRate,
		arg.TotalStrokes,
		arg.TotalDistanceM,
		arg.InstantaneousPace,
		arg.Speed,
		arg.Watts,
		arg.TotalKcal,
		arg.TotalKcalHour,
		arg.TotalKcalMin,
		arg.HeartRate,
		arg.Elapsedtime,
	)
	var i FitnessWaterrower
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.StrokeRate,
		&i.TotalStrokes,
		&i.TotalDistanceM,
		&i.InstantaneousPace,
		&i.Speed,
		&i.Watts,
		&i.TotalKcal,
		&i.TotalKcalHour,
		&i.TotalKcalMin,
		&i.HeartRate,
		&i.Elapsedtime,
	)
	return i, err
}
